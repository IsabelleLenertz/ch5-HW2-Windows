Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/07/16 20:35:48
main.asm						     Page 1 - 1


				; Constants.asm: 
				; Author: Isabelle, in class
				; Date: 2016/04/07
				; Operating System: Windows
				; IDE: Visual Studio/MASM

				.386
				.model flat, stdcall
				.stack 4096
				ExitProcess proto,dwExitCode:dword

				; Required by Bill's print to console function
 =-0000000B			getstdout = -11 
				WriteFile PROTO NEAR32 stdcall, \ 
				        handle:dword,			\ 
				        buffer:ptr byte,		\ 
				        bytes:dword,			\ 
				        written: ptr dword,		\ 
				        overlapped: ptr byte 
				GetStdHandle PROTO NEAR32, device:dword 
				ExitProcess PROTO NEAR32, exitcode:dword 

 00000000			.data
 00000000 10 30 F0 20 50		array1 BYTE 10h, 30h, 0F0h, 20h, 50h, 12h
	   12
 00000006 E0 40 22 E5 40		array2 BYTE 0E0h, 40h, 22h, 0E5h, 40h, 55h
	   55
 0000000C  0000000C [			array3 BYTE 12 DUP(0)
	    00
	   ]

					; Required by Bill's print to console functions
 00000018 48 65 6C 6C 6F		message db "Hello World!", 13, 10 
	   20 57 6F 72 6C
	   64 21 0D 0A
 00000026 0000000E			msg_size dd $ - offset message
 0000002A 0D 0A 00			szLF  BYTE  0dh, 0ah, 0h						; goes to the next line

 00000000			.data?
 00000000  0000000C [			buffer BYTE 12 DUP(?)
	    00
	   ]
					; Required by Bill's print to console function
 0000000C 00000000			written dd ?
 00000000			.code

				;--------------------------------------------------------------------------------------------------------
 00000000			AppendArray PROC
				; Input:
				;			eax: address of the first array
				;			ebx: address of the second array
				;			edi: address of the third array (has to be size of array1+size of array2)
				; OutPut:	[edx]: contains array1, then array2
				; Requires:	nothing
				;--------------------------------------------------------------------------------------------------------
					; saves the register to be used
 00000000  51				PUSH ecx
 00000001  56				PUSH esi
 00000002  52				PUSH edx

					; loop going through array1 and coping it into array3
 00000003  B9 00000006			MOV ecx, LENGTHOF array1	; initialize loop counter (goes through array1)
 00000008  BE 00000000			MOV esi, 0					; initialize counter for indirect addressing
 0000000D				AppendArray_copy1:			; begining of the loop
 0000000D  8A 34 06				MOV dh, [eax + esi]							; copie a value of the first array into a registers
 00000010  88 34 3E				MOV [edi+ esi], dh							; moves the value from the register to array3 in memory
 00000013  83 C6 01				ADD esi, (SIZEOF array1/LENGTHOF array1)	; goes to the next element in the array
 00000016  E2 F5				LOOP AppendArray_copy1						; goes to the begining of the loop (dec ecx)

					; loop going through array2 and coping it into array3
 00000018  B9 00000006			MOV ecx, LENGTHOF array2	; initialize loop counter (goes through array2)
 0000001D  BE 00000000			MOV esi, 0					; initialize counter for indirect addressing
 00000022				AppendArray_copy2:			; begining of the loop
 00000022  8A 34 06				MOV dh, [eax + esi]							; copie a value of the first array into a registers
 00000025  88 74 3E 06				MOV [edi+ esi + LENGTHOF array1], dh		; moves the value from the register to array3
 00000029  83 C6 01				ADD esi, (SIZEOF array1/LENGTHOF array1)	; goes to the next element in the array
 0000002C  E2 F4				LOOP AppendArray_copy2						; goes to the begining of the loop (dec ecx)

					; restor the registers
 0000002E  5A				POP edx
 0000002F  5E				POP esi
 00000030  59				POP ecx

 00000031  C3				ret
 00000032				AppendArray ENDP ; end of the AppendArray procedure
				;--------------------------------------------------------------------------------------------------------


				;--------------------------------------------------------------------------------------------------------
				; Bill's code
 00000032			DisplayText proc
				;Assumes that the message variable and the msg_size variable have been set
				    invoke GetStdHandle, getstdout
				    invoke WriteFile,		\
				           eax,				\
				           OFFSET message,	\
				           msg_size,		\
				           OFFSET written,	\
				           0
 00000051  C3				ret
 00000052			DisplayText endp
				;------------------------------------------------------------------------------------------


				;------------------------------------------------------------------------------------------
 00000052			DisplayNL PROC
				;		Assumes that the szFL has been defined in the .data section;
				;		szLF  BYTE  0dh, 0ah, 0h
				;------------------------------------------------------------------------------------------
				    invoke GetStdHandle, getstdout
				    invoke WriteFile,		\
				           eax,				\
				           OFFSET szLF,		\
				           3,				\
				           OFFSET written,	\
				           0
 0000006D  C3				ret
 0000006E			DisplayNL ENDP
				;-------------------------------------------------------------------------------------------------


				;-----------------------------------------------------------------------
 0000006E			ConvertIntToAscii:
				;	Converts an unsigned integer to ascii and prints it. Max 16-bits value
				;	Receives:	the value to be converted into ax (a 16-bit value)
				;				the address to store the new value into esi
				;	Returns:	The new ascii value into the address pointed byt esi
				; 	Requires:	
				;-----------------------------------------------------------------------
					; saves the value of ecx, ebx, and edi
 0000006E  53				PUSH ebx
 0000006F  51				PUSH ecx
 00000070  52				PUSH edx
 00000071  57				PUSH edi
 00000072  56				push esi
					
 00000073  BA 00000000			MOV	edx, 0h						; clear edx
 00000078  B3 0A			MOV	bl, 0ah						; get ready to divide by 10
 0000007A  BF 0000000F			MOV	edi, 15						; initialize position counter

 0000007F				ContConvert:
 0000007F  F6 F3				div	bl						; divide. Remainder will be in ah, result in al					PROGRAM RECEIVED DIGNAL SIGFPE, Arthimetic exception
 00000081  80 C4 30				add ah, 30h					; add 48 (30h) to ah to convert to ascii
						
 00000084  88 24 37				MOV [esi+edi], ah			; move the ascii value into the inidicated storage address+edi
						
 00000087  B4 00				MOV ah, 0h					; clears out ah - no longger needed
 00000089  3C 00				CMP al, 0h					; Check al and make sur it is not zero
 0000008B  74 03				JE PrintResult				; Leave the loop if al is 0
													; Else continue
 0000008D  4F					DEC edi						; Decrement the number of elements
						
 0000008E  EB EF			jmp ContConvert					; Loop again

 00000090				PrintResult:					; Print the result
						
 00000090  BA 00000010				MOV edx, 16
 00000095  2B D7				SUB edx, edi				; The length of the data to print is moved to edx (required by the DisplayText function)
 00000097  89 15 00000026 R			MOV msg_size, edx
						
								
 0000009D  8B CE				MOV ecx, esi				; The address of the data to print is moved to ecx (required by the DisplayText function)
 0000009F  03 CF				ADD ecx, edi
 000000A1  8B F1				MOV esi, ecx
						;MOV bx, WORD PTR[ecx]
						;MOV WORD PTR message, bx
						;CALL DisplayText
						
					; restors the value of ecx, ebx, and edi
 000000A3  5E				POP esi
 000000A4  5F				POP edi
 000000A5  5A				POP edx
 000000A6  59				POP ecx
 000000A7  5B				POP ebx
					
 000000A8  C3				RET								;Exit the procedue
				;end of ConvertIntToAscii
				;------------------------------------------------------------------------------------------------

 000000A9			main PROC
 000000A9  90				nop
 000000AA  60				PUSHAD
					;Start of User Code
					

					; get ready to call the AppendArray procedure
 000000AB  B8 00000000 R		MOV eax, OFFSET array1
 000000B0  BB 00000006 R		MOV ebx, OFFSET array2
 000000B5  BF 0000000C R		MOV edi, OFFSET array3
					; appends array2 to array1 and stor them into array3
 000000BA  E8 FFFFFF41			CALL AppendArray

 000000BF  BE 00000018 R		MOV esi, OFFSET message 
 000000C4  66| 0F B6 05			MOVZX ax, [array3]
	   0000000C R
 000000CC  E8 FFFFFF9D			CALL ConvertIntToAscii
					

					;End of User Code
 000000D1  61				POPAD
 000000D2  90				nop
					invoke ExitProcess, 0

 000000DA			main endp
				end main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/07/16 20:35:48
main.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 00000010 DWord	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 0000002D DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000DA DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AppendArray  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000032 Public STDCALL
  AppendArray_copy1  . . . . . .	L Near	 0000000D _TEXT	
  AppendArray_copy2  . . . . . .	L Near	 00000022 _TEXT	
DisplayNL  . . . . . . . . . . .	P Near	 00000052 _TEXT	Length= 0000001C Public STDCALL
DisplayText  . . . . . . . . . .	P Near	 00000032 _TEXT	Length= 00000020 Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 000000A9 _TEXT	Length= 00000031 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ContConvert  . . . . . . . . . .	L Near	 0000007F _TEXT	
ConvertIntToAscii  . . . . . . .	L Near	 0000006E _TEXT	
PrintResult  . . . . . . . . . .	L Near	 00000090 _TEXT	
array1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
array2 . . . . . . . . . . . . .	Byte	 00000006 _DATA	
array3 . . . . . . . . . . . . .	Byte	 0000000C _DATA	
buffer . . . . . . . . . . . . .	Byte	 00000000 _BSS	
getstdout  . . . . . . . . . . .	Number	 -0000000Bh   
message  . . . . . . . . . . . .	Byte	 00000018 _DATA	
msg_size . . . . . . . . . . . .	DWord	 00000026 _DATA	
szLF . . . . . . . . . . . . . .	Byte	 0000002A _DATA	
written  . . . . . . . . . . . .	DWord	 0000000C _BSS	

	   0 Warnings
	   0 Errors
